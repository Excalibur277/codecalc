; Module

use64

format ELF64 executable 3
entry main

segment readable writeable

panic_msg db 'Panic! Attempting to divide or mod by 0, exiting early.',0xA
panic_msg_size = $-panic_msg
arraypanic_msg db 'Panic! Attempting to initilize array with size less than or equal to 0, exiting early.',0xA
arraypanic_msg_size = $-arraypanic_msg

segment readable executable

main: 
  ; Setup Call Stack Frame
  push rbp
  mov rbp, rsp

  ; Call Function
  call routine

  ; Reset Stack Frame
  mov rsp, rbp
  pop rbp


  jmp exit

printInt:
  ; Move parameter to rax
  mov rax, [rsp+8]
 
  ; Create String Buffer
  sub rsp, 21

  ; Move divisor to rbx
  mov rbx, 10


  ; Add Newline to end of msg
  mov rcx, 21
  mov byte [rsp+rcx-1], 10
  dec rcx
  mov r14,1
 
  xor r15, r15
  ; Test if the value is positive, else make it negative
  test rax, rax
  jns .next 
  neg rax 
  mov r15, 1
  .next:
 
  .repeat:
  xor rdx, rdx ; 0 out rdx
  div rbx ; RDX:RAX / RBX
  add rdx, '0' ; Remainder [0,9] -> ["0","9"]

  mov byte [rsp+rcx-1], dl 
  inc r14
  dec rcx

  cmp rax, 0
  je .finish
 
  cmp rcx, 2
  jae .repeat

  .finish:

  test r15, r15
  jz .skipMinus
  mov byte [rsp+rcx-1], '-'
  inc r14
  dec rcx
  .skipMinus:

 
  mov rdx, r14
  lea rsi, [rsp+rcx]
  mov rdi, 1 ; STDOUT
  mov rax, 1 ; sys_write
  syscall

  ; Clear up String Buffer
  add rsp, 21

  ret


exit:
  mov rax, 60 ; exit
  mov rdi, 0  ; no error 
  syscall

panic:
  mov rdx, panic_msg_size
  lea rsi, [panic_msg]
  mov rdi, 2 ; STDERR
  mov rax, 1 ; sys_write
  syscall

  mov rax, 60 ; exit
  mov rdi, 0  ; error 
  syscall

arraypanic:
  mov rdx, arraypanic_msg_size
  lea rsi, [arraypanic_msg]
  mov rdi, 2 ; STDERR
  mov rax, 1 ; sys_write
  syscall

  mov rax, 60 ; exit
  mov rdi, 0  ; error 
  syscall

routine:
  mov rax, 3
  cmp rax,0
  jle arraypanic
  inc rax
  imul rax, 8
  mov rdi, 0
  mov rsi, rax
  mov rdx, 3
  mov r10, 34
  mov r8, -1
  mov r9, 0
  mov rax, 9
  syscall
  push rax
  mov rax, 0
  lea r8, [rbp-16]
  mov rax, [r8+rax*8+8]
  ; Setup Call Stack Frame
  push rbp
  mov rbp, rsp
  
  ; Call Function
  push rax
  call printInt
  add rsp, 8
  
  ; Reset Stack Frame
  mov rsp, rbp
  pop rbp
  add rsp, 8
  ret